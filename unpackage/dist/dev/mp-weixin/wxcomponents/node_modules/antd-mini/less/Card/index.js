import { __assign } from "tslib";
import { Component, getValueFromProps, triggerEvent, triggerEventOnly, } from '../_util/simply';
import { CardDefaultProps } from './props';
Component(CardDefaultProps, {
    // 点击展开收起按钮
    handleTapFoldBtn: function (e) {
        var _a = this.data, _b = _a.finalConfig, finalConfig = _b === void 0 ? {} : _b, finalFoldStatus = _a.finalFoldStatus;
        if (finalConfig.foldTapArea === 'btn') {
            this.setData({
                finalFoldStatus: !finalFoldStatus,
            });
            triggerEvent(this, 'foldChange', !finalFoldStatus, e);
        }
    },
    // 点击标题整栏
    handleTapCardHeader: function (e) {
        var _a = this.data, _b = _a.finalConfig, finalConfig = _b === void 0 ? {} : _b, finalFoldStatus = _a.finalFoldStatus;
        if (finalConfig.foldTapArea === 'header' && this.props.needFold) {
            this.setData({
                finalFoldStatus: !finalFoldStatus,
            });
            triggerEvent(this, 'foldChange', !finalFoldStatus, e);
        }
    },
    // 点击更多
    handleTapLink: function (e) {
        triggerEventOnly(this, 'operateClick', e);
    },
    // 处理title的sticky状态变化
    handleStickyChange: function (status) {
        triggerEvent(this, 'titleSticky', status);
    },
}, {
    finalFoldStatus: false,
}, undefined, {
    onInit: function () {
        var _a = getValueFromProps(this, [
            'foldStatus',
            'config',
        ]), foldStatus = _a[0], config = _a[1];
        this.setData({
            finalFoldStatus: foldStatus,
            finalConfig: __assign(__assign({}, CardDefaultProps.config), config),
        });
    },
    didUpdate: function (prevProps) {
        var foldStatus = getValueFromProps(this, 'foldStatus');
        if (prevProps.foldStatus !== foldStatus) {
            this.setData({
                finalFoldStatus: foldStatus,
            });
        }
    },
});
