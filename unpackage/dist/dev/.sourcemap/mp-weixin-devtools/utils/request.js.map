{"version":3,"names":["common_vendor","axios","defaults","adapter","require","instance","create","baseURL","timeout","interceptors","request","use","config","index","showToast","title","icon","mask","duration","error","Promise","reject","response","res","data","status","hideToast"],"sources":["request.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.adapter = require('axios/lib/adapters/xhr');\r\n\r\n// 创建axios实例，将对创建出来的实例进行自定义配置\r\n// 不会污染原始axios\r\n\r\nconst instance = axios.create({\r\n\t// 后续会根据服务端基地址进行更改\r\n\tbaseURL: 'http://smart-shop.itheima.net/index.php?s=/api',\r\n\ttimeout: 5000\r\n})\r\n\r\n// 配置mock环境\r\n// const mockService = axios.create({\r\n// \tbaseURL: '/api',\r\n// \ttimeout: 5000\r\n// })\r\n// 开发环境拦截器\r\n// if (process.env.NODE_ENV === 'development') {\r\n// \tmockService.interceptors.request.use(config => {\r\n// \t\tconsole.log('mock拦截')\r\n// \t\treturn config\r\n// \t})\r\n// }\r\n// 自定义配置,配置请求响应拦截器\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(function(config) {\r\n\t// 在发送请求之前做些什么\r\n\t// 开启loading，禁止背景点击，也相当于一个节流效果\r\n\t// 自定义加载图标\r\n\tuni.showToast({\r\n\t\ttitle: \"加载中...\",\r\n\t\ticon: \"loading\",\r\n\t\tmask: true,\r\n\t\tduration: 10000\r\n\t})\r\n\r\n\t// 只要有token，就在请求时携带，便于请求需要授权的接口\r\n\t// const token = store.getters.token\r\n\tconst token = ''\r\n\tif (token) {\r\n\t\tconfig.headers['Access-Token'] = token\r\n\t\tconfig.headers.platform = 'h5'\r\n\t}\r\n\r\n\treturn config\r\n}, function(error) {\r\n\t// 对请求错误做些什么\r\n\treturn Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(function(response) {\r\n\t// 2xx 范围内的状态码都会触发该函数。\r\n\t// 对响应数据做点什么\r\n\r\n\tconst res = response.data\r\n\tif (res.status !== 200) {\r\n\t\tuni.showToast({\r\n\t\t\ttitle: \"服务器开小差啦~\",\r\n\t\t\ticon: \"error\",\r\n\t\t\tduration: 2000\r\n\t\t})\r\n\t\t// 抛出错误提示\r\n\t\treturn Promise.reject('服务器开小差啦~')\r\n\t} else {\r\n\t\tuni.hideToast()\r\n\t}\r\n\treturn res\r\n}, function(error) {\r\n\t// 超出 2xx 范围的状态码都会触发该函数。\r\n\t// 对响应错误做点什么\r\n\r\n\treturn Promise.reject(error)\r\n})\r\n\r\nexport default instance\r\n// export default mockService"],"mappings":";;;;AAEAA,aAAA,CAAMC,KAAA,CAAAC,QAAA,CAASC,OAAA,GAAUC,OAAA,CAAQ,wBAAwB;AAKnD,IAAAC,QAAA,GAAWL,aAAA,CAAAC,KAAA,CAAMK,MAAA,CAAO;EAAA;EAE7BC,OAAA,EAAS;EACTC,OAAA,EAAS;AACV,CAAC;AAgBDH,QAAA,CAASI,YAAA,CAAaC,OAAA,CAAQC,GAAA,CAAI,UAASC,MAAA,EAAQ;EAIlDZ,aAAA,CAAAa,KAAA,CAAIC,SAAA,CAAU;IACbC,KAAA,EAAO;IACPC,IAAA,EAAM;IACNC,IAAA,EAAM;IACNC,QAAA,EAAU;EAAA,CACV;EAUM,OAAAN,MAAA;AACR,GAAG,UAASO,KAAA,EAAO;EAEX,OAAAC,OAAA,CAAQC,MAAA,CAAOF,KAAK;AAC5B,CAAC;AAGDd,QAAA,CAASI,YAAA,CAAaa,QAAA,CAASX,GAAA,CAAI,UAASW,QAAA,EAAU;EAIrD,IAAMC,GAAA,GAAMD,QAAA,CAASE,IAAA;EACjB,IAAAD,GAAA,CAAIE,MAAA,KAAW,KAAK;IACvBzB,aAAA,CAAAa,KAAA,CAAIC,SAAA,CAAU;MACbC,KAAA,EAAO;MACPC,IAAA,EAAM;MACNE,QAAA,EAAU;IAAA,CACV;IAEM,OAAAE,OAAA,CAAQC,MAAA,CAAO,UAAU;EAAA,OAC1B;IACNrB,aAAA,CAAAa,KAAA,CAAIa,SAAA,EAAU;EACf;EACO,OAAAH,GAAA;AACR,GAAG,UAASJ,KAAA,EAAO;EAIX,OAAAC,OAAA,CAAQC,MAAA,CAAOF,KAAK;AAC5B,CAAC","ignoreList":[]}